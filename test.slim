- title = "Lua Slim: Currently Supported Language"
doctype XML
html(xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en")
  head
    title= title
    meta(http-equiv="Content-Type" content="text/html; charset=utf-8")

    :css
      body { background-color: #0ff }
      h1 { font-size: 25px; }
      textarea { font-family: monaco, fixed; font-size: 14px; }
  body
    h1= title
    p
      This file demonstrates most of Lua Haml's features.
    p
      If you're viewing the output and wondering what's so interesting, then
      you should probably be looking at the Haml source instead.
    #content
      - greetings = {en = "hello world!", es = "¡hola mundo!", pt = "olá mundo!"}
      ul#greetings.multilingual
        - for lang, greeting in pairs(greetings) do
          li.greeting(class=lang)= greeting
      p
        &= "<'\"escaped & escaped\"'>"
        != "<'\"NOT escaped & escaped\"'>"
        = "<'\"MAYBE escaped & escaped\"'> (depending on runtime options)"
      #escaped_content
        \#this content is escaped
      #stuff
        This is nested tag content.
      -# This is a comment, which is here to explain that since Lua has no native string interpolation,
      -# the feature is emulated in Lua Haml. In order to make a variable available for string interpolation,
      -# you have to assign it to the "locals" table. Then you can interpolate variables inside content and
      -# filters, which can be useful, for example, to generate Javascript:
