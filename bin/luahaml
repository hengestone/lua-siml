#!/usr/bin/env lua
require "luarocks.require"
require "haml"

local VERSION = "0.0.2"

local banner = "LuaHaml %s, copyright Norman Clarke <norman@njclarke.com>"

local usage = [[

Usage: luahaml [options] [filename]

Description:
  Uses the Haml engine to process the specified input and prints
  the result to standard output.

Options:

  -s, --stdin          Read from standard input
  -i, --inline         Read input from the command line
  -l, --parse          Show the lexer/parser's output for debugging
  -p, --precompile     Show the precompiler's output for debugging
  -v, --version        Show the LuaHaml version
  -?, -h, --help       Show this message

Examples:

  Render a template:
  # luahaml my_template.haml > my_template.haml
  Read input from the command line and show the lexer's output
  # luahaml -l -i '%p'

]]

local function read_file()
  local file = arg[#arg]
  local fh = assert(io.open(file))
  local input = fh:read '*a'
  fh:close()
  return input
end

local function read_stdin()
  return io.stdin:read('*a')
end

local function run_lexer(haml_string)
  local phrases = haml.lexer.tokenize(haml_string)
  for _, t in pairs(phrases) do
    print(t)
  end
end

local function run_precompiler(haml_string)
  print(haml.precompiler.precompile(haml.lexer.tokenize(haml_string)))
end

local function render(haml_string)
  local output = haml.render(haml_string)
  print(output)
end

local function show_banner()
  print(string.format(banner, VERSION))
end

local function show_usage()
  print(usage)
end

local exec_func = render
local input_func = read_file

if #arg == 0 then show_usage() end

for i, v in ipairs(arg) do
  if v == '-p' or v == '--precompile' then
    exec_func = run_precompiler
  elseif v == '-l' or v == '--parse' then
    exec_func = run_lexer
  elseif v == '-s' or v == '--stdin' then
    input_func = read_stdin
  elseif v == '-i' or v == '--inline' then
    local input = arg[i + 1]
    input_func = function() return input end
  elseif v == '-h' or v == '--help' or v == '-?' then
    show_banner()
    show_usage()
    os.exit()
  elseif v == '-v' or v == '--version' then
    show_banner()
    os.exit()
  elseif v == '--copyright' then
    show_license()
    os.exit()
  elseif string.match(v, "^-[a-z0-9%-]") then
    print(string.format('Invalid argument "%s"', v))
    show_usage()
    os.exit()
  end
end
exec_func(input_func())
